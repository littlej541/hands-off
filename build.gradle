buildscript {
    dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}
apply plugin: 'org.spongepowered.mixin'

version = (String)"${mc_version}-${mod_version}-${mod_build}"
group = (String)"$groupname"
archivesBaseName = modid

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: "${mc_version}"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"

            arg "-mixin.config=${modid}.mixins.json"

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"

            arg "-mixin.config=${modid}.mixins.json"

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"

            arg "-mixin.config=${modid}.mixins.json"

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', "${modid}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly fg.deobf('curse.maven:rubidium-574856:4167344')
}

task generateLangJava {
    // TODO generate Lang.java here from en_us.json keys
}

task processSources(type: Copy) {
    from 'src/main/java'
    into "$buildDir/generated/sources"

    filteringCharset = 'UTF-8'

    filter {
        String line -> line.replaceAll("BUILDTOKEN_MODID", "${modid}")
    }

//    doLast {
//        file("$buildDir/generated/sources/cyberslas/BUILDTOKEN_MODID").renameTo("$buildDir/generated/sources/cyberslas/${modid}")
//    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    filteringCharset = 'UTF-8'

    from (sourceSets.main.resources.srcDirs) {
        filesNotMatching('**/*.png') {
            filter {
                String line -> line.replaceAll("BUILDTOKEN_MODID", "${modid}")
                        .replaceAll("BUILDTOKEN_VERSION", "${version}")
                        .replaceAll("BUILDTOKEN_VERSION", "${version}")
                        .replaceAll("BUILDTOKEN_MODNAME", "${modname}")
                        .replaceAll("BUILDTOKEN_AUTHORS", "${authors}")
                        .replaceAll("BUILDTOKEN_LOGOFILE", "${logofile}")
                        .replaceAll("BUILDTOKEN_URL", "${url}")
                        .replaceAll("BUILDTOKEN_ISSUES", "${issues}")
                        .replaceAll("BUILDTOKEN_MODDESCRIPTION", "${mod_description}")
                        .replaceAll("BUILDTOKEN_LICENSE", "${license}")
                        .replaceAll("BUILDTOKEN_FORGEVERSIONSHORT", "${forge_version_short}")
                        .replaceAll("BUILDTOKEN_MCVERSION", "${mc_version}")
            }
        }
    }

//    rename {
//        String filename ->
//            filename.replace("BUILDTOKEN_MODID", "${modid}")
//    }
//
//    doLast {
//        file("$buildDir/resources/main/assets/BUILDTOKEN_MODID").renameTo("$buildDir/resources/main/assets/${modid}")
//        file("$buildDir/resources/main/data/BUILDTOKEN_MODID").renameTo("$buildDir/resources/main/data/${modid}")
//    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": modid,
            "Specification-Vendor": project.group,
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor" : project.group,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": 0,
            "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

processResources.mustRunAfter processSources

processSources.dependsOn generateLangJava

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

compileJava {
    source = processSources.outputs
}